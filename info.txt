1 - Fundamentos
###############

    6 tipos de datos basicos: String, Number, Boolean, Symbol, Null y undefined
    Closures
    rest/spread operator
    Symbols
    Iteradores
        Es un interfaz de bajo nivel para operar con iteradores no solo en arrays.
    Generadores
    Mapas
    Sets
    Object
        seal
        freeze
        assign
        keys
        values
        defineProperty: Configura una propiedad del objeto (existente o nueva)
            Object.defineProperty(obj, prop, desc);
            desc = {
                value,
                enumerable,
                configurable,
                writable
            }
            Valores por defecto: 
                value (undefined)
                enumerable (false)
                configurable (false)
                writable (false)
            get / set
        create


2 - Programacion Orientada a Objetos
####################################

arrow functions:

    fijan this al contexto de definicion de la funcion, no al de invocacion, por lo tanto no depende de como se invoque a la funcion (no es dinamico)

3 - Programacion funcional
##########################

    Paradigma de programacion: es un enfoque particular que resuelve un problema
    Aprender un nuevo lenguaje de programacion es fácil, sin embargo aprender un nuevo paradigma es complicado, ya que hay que cambiar la forma de pensar
    "Programacion funcional es programar sin usar statements de asignacion"

    Functional programming is the process of building software by composing pure functions, avoiding shared state, mutable data, and side-effects. Functional programming is declarative rather than imperative, and application state flows through pure functions. Contrast with object oriented programming, where application state is usually shared and colocated with methods in objects.

    Se trabaja creando muchas operaciones sobre pocos tipos de datos (en js, arrays y objetos) en contraposicion con la programacion orientada a objetos, en la que se realizan pocas operaciones sobre muchos tipos de datos diferentes (clases). Ejemplo:

        POO

            class figuraGeometrica {
                area () {}
            }

            20 subclases que hereden de figuraGeometrica tendran que implementar el metodo area

            y si queremos añadir una nueva operacion a figuraGeometrica, habra que implementarlo 20 veces

        FP

            tenemos 20 operaciones sobre el tipo de dato Objeto, si añadimos otro tipo de dato, tendriamos que implementar las mismas 20 operaciones para ese tipo de data


    Particularidades

        POO 
            Un programa imperativo es semejante a una cadena de montaje, cada clase es una etapa independiente que realiza una funcion separada. Esta expresada como instrucciones a seguir

        FP
            
            Un programa funcional es semejante a un diccionario
                - Cada funcion define un nuevo concepto expresando una relacion de elementos mas simples. Es decir, a partir de las herramientas que nos da el lenguaje construimos muchas funciones muy sencillas
                - Estas funciones se combinan para expresar ideas más complejas
                - La meta es definir un vocabulario de dominio con el que se pueda expresar nuestra aplicacion, expresar que queremos conseguir (en contraposcion a como lo queremos conseguir)
                - Pensamos en resultados, no en pasos

    La programacion funcional se basa en las siguientes reglas:

        Eliminar el estado del programa
        Expresar la computacion con transformaciones de datos (sin mutar estado)
        Escribir y combinar funciones

    Ventajas

        Es mas facil razonar sobre el codigo si esta expresado declarativamente y sin estado
        Cualquier seccion del codigo se puede entender y testear aisladamennte
        Es mas sencillo predecir el comportamiento del programa
        Fomenta la reutilizacion del codigo
        El programa crece de manera natural. Cuanto más crece, más rico es su vocabulario y cuanto más rico es su vocabulario, más fácil es seguir extendiéndolo

    Conceptos fundamentales

        funcion - es la pieza clave de la programacion funcional
        transparencia referencial - una expresion es transparentemente referencial si se puede sustituir por su valor sin alterar el funcionamiento del programa
        funciones puras - funcion cuyo valor de salida solo viene determinado por sus parametros de entrada, para mismos parametros de entrada siempre devolveran el mismo resultado evitando efectos secundarios (modificacion de estado en alguna otra parte)
        estado - no hay que almacenar estado
        programacion declarativa - indicar QUE se quiere hacer en lugar de COMO se quiere conseguir
        programacion imperativa - es un estilo de programacion (paradigma?) donde secuencialmente le decimos paso a paso al programa lo que vamos a ejecutar
        expresion - es una combinacion de valores y funciones que devuelve un valor
        sentencia - no devuelve un valor
        predicado - una funcion que devuelve true o false


    Js as Functional Language

        In functional programming, any type of data is fair game. The same map() utility can map over objects, strings, numbers, or any other data type because it takes a function as an argument which appropriately handles the given data type. FP pulls off its generic utility trickery using higher order functions.
        JavaScript has first class functions, which allows us to treat functions as data — assign them to variables, pass them to other functions, return them from functions, etc…
        A higher order function is any function which takes a function as an argument, returns a function, or both. Higher order functions are often used to:

    Herramientas para poder seguir las reglas:

        Funciones de orden superior

            Son funciones que operan sobre otras funciones:
                - Reciben funciones como parametros de entrada
                - Devuelven funciones como retorno
                - Nos permiten abstraer sobre acciones

        Operaciones fundamentales:

            Sobre listas:
                - map
                - filter
                - reduce
            
            Sobre objetos:
                - prop
                - assoc
                - mapKeys
                - mapValues

            Generales
                - curry
                - partial
                - monads

        Composición de funciones

            Recursividad 
                - Es la composición más simple
                - Toda operacion que pueda expresarse como un bucle, puede expresarse de manera recursiva
                La recursividad es superior a la iteracion porque es mas expresiva y el estado es manejado por el entorno, no por nosotros
            compose
            pipe

        Programación Tácita (point-free programming = sin argumentos)
            - Definir funciones componiendo otras funciones
            - No hacer explícitos los argumentos
            
            Esta manera de programar:
                - Ayuda a pensar en componer funciones (alto nivel) en vez de pensar en manipular data (bajo nivel)
                - Fomenta la creación de un vocabulario rico del dominio
                - Es un estilo ideal al que deberíamos tender, el “nirvana” de la programación funcional
                - Es síntoma de un programa maduro y bien diseñado
                - Es característico de las capas “altas” del programa
    Patterns associated
4 - Programacion asincrona
##########################

Decoradores
###########
    
    los decoradores se ejecutan al instanciar la clase y ademas tambien se ejecutan las funciones que se devuelvan, si es que se devuelve alguna

    Funciones que alteran el comportamiento de un metodo. Reciben 3 parametros: la clase, el metodo, y el descriptor de la propiedad sobre la que se aplican

    Se ejecutan en el momento ejecucion, al definir la clase donde se encuentren


Otros
#####

    try catch congela la ejecucion

    cuando haces una coercion de tipos de un array a string, js ejecuta su metodo toString, por eso al hacer console.log(['a', 'b']) te muestra a,b

    The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object.

    { 
        "presets": ["env"],
        "plugins": [
            "transform-decorators-legacy"
        ]
    }